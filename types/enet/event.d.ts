declare module "enet" {
  export type EventType = "connect" | "disconnect" | "receive";

  /**
   * An event is a table generated by `host:service()` or `peer:receive()` which will always contain a string named `type`,
   * an `enet.peer` named `peer`, and a string or number named `data` depending on the kind of event.
   * `receive` has an additional field named `channel` which contains the channel the data was received on specified by `enet.peer:send`,
   * by default this is 0.
   *
   * Note that `host:service()` and `peer:receive()` can return `nil` if no events are in the queue.
   *
   * Structure:
   * - `event.type`: "receive" | "disconnect" | "connect"
   * - `event.peer`: `peer`
   * - `event.data`: `string` | `number`
   * - `event.channel`: `number` (only for "receive" events)
   */
  export interface BaseEvent {
    type: EventType;
    peer: Peer;
    data: string | number;
    channel?: number;
  }
  /**
   *
   * Represents a receive event in the ENet networking library.
   *
   * @extends BaseEvent
   * @property {string} type - The type of the event, always "receive" for this event.
   * @property {string} data - The data received in the event.
   * @property {number} channel - The channel the data was received on.
   */
  export interface ReceiveEvent extends BaseEvent {
    type: "receive";
    data: string;
    channel: number;
  }

  /**
   * Represents a disconnect event in the ENet networking library.
   *
   * @extends BaseEvent
   * @property {string} type - The type of the event, which is always "disconnect" for this event.
   * @property {number} data - The data associated with the disconnect event.
   * @property {undefined} channel - This field is always undefined for disconnect events.
   */
  export interface DisconnectEvent extends BaseEvent {
    type: "disconnect";
    data: number;
    channel: undefined;
  }

  /**
   * Represents a connect event generated by `host:service()` or `peer:receive()`.
   *
   * @property {string} type - The type of the event, which is "connect".
   * @property {number} data - A numeric value associated with the event.
   * @property {never} channel - This event does not have a channel.
   */
  export interface ConnectEvent extends BaseEvent {
    type: "connect";
    data: number;
    channel: never;
  }
  export type Event = ReceiveEvent | DisconnectEvent | ConnectEvent;
}
